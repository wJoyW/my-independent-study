import sys
import re
import pickle
from sklearn.feature_extraction.text import CountVectorizer

def Read(fileName):
  '''
  input : fileName(file_path)
  output: Serial_ID, Device_Name, seq
  (all the type is str)
  '''

  # open and read file
  try:
    f = open(fileName,'r')
  except:
    exit('error: FileNotFound')

  lines = f.readlines()

  # get the SerialID and DeviceName
  Serial_ID = 'unknown' # initialize
  Device_Name = 'unknown'
  temp = re.search(r'.*Serial_ID=(.+)Device_Name=(.+), PID', lines[0])
  try:
    Serial_ID = temp.group(1)
    Device_Name = temp.group(2)
  except:
    print('Serial_ID and Device_Name not found.')

  # get the system call sequence
  seq = str()
  for line in lines:
    # try to catch the syscall in the line
    # if there's not any syscall in the line -> continue -> next line
    try:
      syscall_this_line = re.search(r'[\d]+\.[\d]+\b (\w*)',line).group(1)
      seq += syscall_this_line
      seq += '\n'
    except:
      continue
  f.close()

  return Serial_ID, Device_Name, seq

#--------------------------------------------------------------#

def main():
  if len(sys.argv) > 2:
    exit('error: only one input, no more than one.\n')

  # Input
  Serial_ID, Device_Name, seq = Read(sys.argv[1])
  # print('Device_Name:',Device_Name)
  # print('Serial_ID:',Serial_ID)

  # if the len(seq) <= 30
  if len(seq.split()) <= 30:
    result = False
    print('MAL = ',result)
    return False

  # system call seq => feature vector
  vectorizer = CountVectorizer(decode_error='replace',vocabulary=pickle.load(open('feature.pkl','rb')))
  feature_vector = vectorizer.fit_transform([seq]) / len(seq.split())
  
  # load model and predict
  rf = pickle.load(open('rf.pkl','rb'))
  result = rf.predict(feature_vector)

  # Output
  if result == 0:
    result = False
    print('MAL = ',result)
    return False
  
  result = True
  print('MAL = ',result)
  return True

if __name__ == '__main__':
  main()